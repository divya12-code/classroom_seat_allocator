Here's a C solution for the Classroom Seat Allocator problem:

*Classroom Seat Allocator*
*Problem Statement*
Arrange students from different departments in a 2D seat matrix, ensuring that students from the same department are not seated next to each other.

*Code*
```
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100
#define MAX_DEPT_LENGTH 10
#define MAX_ROLL_LENGTH 10

typedef struct {
    char roll[MAX_ROLL_LENGTH];
    char dept[MAX_DEPT_LENGTH];
} Student;

// Function to allocate students to seats
void allocate_seats(Student students[], int n, int rows, int cols) {
    // Initialize seat matrix
    Student seats[rows][cols];
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            strcpy(seats[i][j].roll, "");
            strcpy(seats[i][j].dept, "");
        }
    }

    int student_index = 0;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (student_index < n) {
                // Check if the student can be seated without violating the rule
                if (i > 0 && strcmp(seats[i-1][j].dept, students[student_index].dept) == 0) {
                    continue;
                }
                if (j > 0 && strcmp(seats[i][j-1].dept, students[student_index].dept) == 0) {
                    continue;
                }
                strcpy(seats[i][j].roll, students[student_index].roll);
                strcpy(seats[i][j].dept, students[student_index].dept);
                student_index++;
            }
        }
    }

    // Print seat matrix
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (strcmp(seats[i][j].roll, "") != 0) {
                printf("(%s, %s) ", seats[i][j].roll, seats[i][j].dept);
            } else {
                printf("(Empty) ");
            }
        }
        printf("\n");
    }
}

int main() {
    // Input
    Student students[] = {
        {"1", "CS"},
        {"2", "CS"},
        {"3", "EE"},
        {"4", "EE"},
        {"5", "ME"},
        {"6", "ME"},
        {"7", "CS"},
        {"8", "EE"},
        {"9", "ME"},
        {"10", "CS"},
        {"11", "EE"},
        {"12", "ME"}
    };
    int n = sizeof(students) / sizeof(students[0]);
    int rows = 3;
    int cols = 4;

    // Allocate seats
    allocate_seats(students, n, rows, cols);

    return 0;
}
```

*Output*
The output will be a 3x4 seat matrix with students allocated to seats such that no two students from the same department are seated next to each other.

Note that this solution may not always find the optimal arrangement, especially for larger inputs. You may need to use more advanced algorithms or techniques, such as graph coloring or constraint programming, to find a better solution.